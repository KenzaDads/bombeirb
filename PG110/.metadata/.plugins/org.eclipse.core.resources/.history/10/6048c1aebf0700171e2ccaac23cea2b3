#include <SDL/SDL_image.h>
#include <assert.h>

#include <player.h>
#include <sprite.h>
#include <window.h>
#include <misc.h>
#include <constant.h>


struct player {
	int x, y;
	enum direction current_direction;
	int nb_bombs;
};

struct player* player_init(int bomb_number) {
	struct player* player = malloc(sizeof(*player));
	if (!player)
		error("Memory error");

	player->current_direction = SOUTH;
	player->nb_bombs = bomb_number;

	return player;
}

void player_free(struct player* player) {
	assert(player);
	free(player);
}

int player_get_x(struct player* player) {
	assert(player != NULL);
	return player->x;
}

int player_get_y(struct player* player) {
	assert(player != NULL);
	return player->y;
}

void player_set_current_way(struct player* player, enum direction way) {
	assert(player);
	player->current_direction = way;
}

int player_get_nb_bomb(struct player* player) {
	assert(player);
	return player->nb_bombs;
}

void player_inc_nb_bomb(struct player* player) {
	assert(player);
	player->nb_bombs += 1;
}

void player_dec_nb_bomb(struct player* player) {
	assert(player);
	player->nb_bombs -= 1;
}

void player_from_map(struct player* player, struct map* map) {
	assert(player);
	assert(map);

	int i, j;
	for (i = 0; i < map_get_width(map); i++) {
	  for (j = 0; j < map_get_height(map); j++) {	
	    if (map_get_cell_type(map, i, j) == CELL_PLAYER) {
	      player->x = i;
	      player->y = j;
	    }
	  }
	}
}

static int player_move_aux(struct player* player, struct map* map, int x, int y) {

	if (!map_is_inside(map, x, y))
		return 0;

	switch (map_get_cell_type(map, x, y)) {
	case CELL_SCENERY:
		return 0;
		break;

	case CELL_BOX:
		//if (map_get_cell_type(map, int x, int y)== CELL_EMPTY)
		return 1;
		break;

	case CELL_BONUS:
		break;

	case CELL_MONSTER:
		break;

	case CELL_PLAYER:
		break;

	default:
		break;
	}

	// Player has moved
	return 1;
}

int player_move(struct player* player, struct map* map) {
	int x = player->x;
	int y = player->y;
	int move = 0;
	switch (player->current_direction) {
	case NORTH:
		if (y-1 < 0){
		}
		else if (player_move_aux(player, map, x, y - 1)) {
			if(map_get_cell_type(map, x, y-1)==CELL_BOX){
				if ((map_get_cell_type(map, x, y-2)== CELL_EMPTY) && (y-2>=0)){
					map_set_cell_type(map, x, y-2, CELL_BOX);
				}
				else if ((map_get_cell_type(map, x, y-2)!= CELL_EMPTY)||(y-2<0)){
					break;
				}
			}
			player->y--;
			move = 1;
		}
		break;

	case SOUTH:
		if(y + 1 > map_get_height(map)-1){
		}
		else if (player_move_aux(player, map, x, y + 1)) {
			if(map_get_cell_type(map, x, y+1)==CELL_BOX){
				if ((map_get_cell_type(map, x, y+2)== CELL_EMPTY)&&(y+2<= map_get_height(map)-1)){
					map_set_cell_type(map, x, y+2, CELL_BOX);
				}
				else if ((map_get_cell_type(map, x, y+2)!= CELL_EMPTY)||(y+2> map_get_height(map)-1)){
					break;
				}
			}
			player->y++;
			move = 1;
		}
		break;

	case WEST:
		if(x - 1 < 0){
		}
		else if (player_move_aux(player, map, x - 1, y)) {
			if(map_get_cell_type(map, x-1, y)==CELL_BOX){
				if ((map_get_cell_type(map, x-2, y)== CELL_EMPTY)&&(x-2 >=0)){
					map_set_cell_type(map, x-2, y, CELL_BOX);
				}
				else if ((map_get_cell_type(map, x-2, y)!= CELL_EMPTY)||(x-2 < 0)){
					break;
				}
			}
			player->x--;
			move = 1;
		}
		break;

	case EAST:
		if (x + 1 > map_get_width(map)-1){
		}
		else if (player_move_aux(player, map, x + 1, y)) {
			if(map_get_cell_type(map, x+1, y)==CELL_BOX){
				if ((map_get_cell_type(map, x+2, y)== CELL_EMPTY)&&(x+2<= map_get_width(map)-1)){
					map_set_cell_type(map, x+2, y, CELL_BOX);
				}
				else if ((map_get_cell_type(map, x+2, y)!= CELL_EMPTY)||(x+2> map_get_width(map)-1)){
					break;
				}
			}
			player->x++;
			move = 1;
		}
		break;
	}
	if (move) {
		if((map_get_cell_type(map, x, y)!=CELL_BOMB) && (map_get_cell_type(map, x, y)!=CELL_DOOR))
		{
			map_set_cell_type(map, x, y, CELL_EMPTY);
		}
		else if (map_get_cell_type(map, player->x, player->y)==CELL_DOOR)
		{
			map_set_cell_type(map, x, y, CELL_DOOR);
		}
		else if(map_get_cell_type(map, player->x, player->y)==CELL_BOMB)
		{
			map_set_cell_type(map, x, y, CELL_BOMB);
		}
		/*map_set_cell_type(map, player->x, player->y, CELL_PLAYER);*/
		/*A remplir pour Ã©viter de faire disparaitre les bombes et la porte*/
	}
	return move;
}

void player_display(struct player* player) {
	assert(player);
	window_display_image(sprite_get_player(player->current_direction),
			player->x * SIZE_BLOC, player->y * SIZE_BLOC);
}

/*void player_place_bomb(struct player* player){
	if(player_get_nb_bomb((struct player * player)<=0)){
		break;
	}
	else
		map_set_cell_type(map, x, y-2, )

}*/
